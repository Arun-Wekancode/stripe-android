#!/bin/bash
set -eu
set -o pipefail

# invitation for enrolling to jss
enrollment_invite='318026568035627000628803707608018703959'

# Set at imaging time, must be reset before we actually get anywhere
# that places certs on this machine:
default_password='llamafalafels'


run() {
    echo >&2 "+ $*"
    "$@"
}

wait_for_file() {
    echo "- Waiting for $1..."
    while ! [ -f "$1" ] ; do
        sleep 1
    done
}

wait_for_network() {
    echo "Waiting for network to come up..."
    ping -o 8.8.8.8
}

default_password_set() {
    sudo -k
    if dscl . -passwd /Users/$USER "$default_password" "$default_password" >/dev/null 2>/dev/null ; then
        return 0
    else
        return 1
    fi
}

run_background_jobs() {
    trap 'kill $sudo_pid $caffeinate_pid' EXIT
    while echo "$user_password" | sudo -v -S -p '' ; do
        sleep 60
    done &
    local sudo_pid=$!
    caffeinate -ids &
    local caffeinate_pid=$!
}

# we shouldn't be root when running this
if [ "$(id -u)" -eq 0 ]; then
    echo "error: this script should not be run as root"
    exit 1
fi

wait_for_network

user_password="$default_password"
if ! default_password_set ; then
    read -p "Enter sudo password for $USER: " -s user_password
    echo "$user_password" | sudo -k -v -S -p ''
    run_background_jobs
else
    echo "$user_password" | sudo -v -S -p ''
fi

# hack the planet
# force renrollment with the jss since it doesn't always work the first time
# hopefully someday we don't need to do this :(
jssenroll="/etc/stripe/facts/jssenroll.txt"

enroll_running=0
while [ $enroll_running = 0 ]; do
  echo "Waiting for previous enroll to complete..."
  set +e
  ps -ef | grep jamf | grep enroll
  enroll_running=$?
  set -e
  sleep 1
done

if [ ! -f $jssenroll ]; then
  echo "Re-enrolling to the jss..."
  sudo /usr/local/bin/jamf enroll -invitation "$enrollment_invite"
  sudo touch $jssenroll
fi

# check if filevault is enabled. If not, wait for Casper to enable it.
fvstatus=$(sudo fdesetup status | grep -c "FileVault is On" || true)

if [ $fvstatus = 0 ]; then
    fdedeferstatus=$(sudo fdesetup showdeferralinfo | grep -c "Defer = 1")

    while [ $fdedeferstatus = "0" ]; do
        fdedeferstatus=$(sudo fdesetup showdeferralinfo | grep -c "Defer = 1")
        echo "Waiting for Casper to enable Filevault"
        sleep 5
    done

    echo "#####"
    echo "Filevault is enabled but requires user to logout."
    echo "Wait for logout and enter user's password..."
    echo "#####"

    sleep 5

    # logout and restart
    osascript -e 'tell application "System Events" to restart'

    # kill the terminal so it doesn't interrupt reboot
    killall Terminal
fi

trap 'echo ERROR' EXIT

# Reset any default passwords from imaging:
if default_password_set ; then
    echo "Default password detected, we must reset it now!"
    read -p "Enter new password for $USER: " -s user_password
    dscl . -passwd /Users/$USER "$default_password" "$user_password"

    # Update the keychain password, also:
    security unlock-keychain -p "$default_password" login.keychain
    security set-keychain-password -o "$default_password" -p "$user_password" login.keychain
    # TODO: Local Items, maybe?
    security unlock-keychain -p "$user_password" login.keychain

    # Prime Sudo again:
    sudo -k
    echo "$user_password" | sudo -v -S -p ''
    run_background_jobs
fi

# enable SSH
run sudo systemsetup -setremotelogin on

# allow this user to be sshed-to
run sudo dseditgroup -o edit -n /Local/Default -a $USER -t user com.apple.access_ssh

# restart ssh
run sudo launchctl unload /System/Library/LaunchDaemons/ssh.plist
run sudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist

# SSH key doesn't exist until we hit the SSH server for the first time
echo hello | run nc -z localhost 22

if ! which sixword >/dev/null; then
    run sudo gem install sixword
fi

suggested_ip=''
echo "Potential IP addresses:"
for i in $(seq 0 "$(ipconfig ifcount)"); do
    if="en$i"
    ip="$(ipconfig getifaddr "$if" || true)"
    if ! [ -z "$ip" ] ; then
        echo "$if: $ip"
        if [ -z "$suggested_ip" ] ; then
            suggested_ip="$ip"
        else
            suggested_ip="{IP}"
        fi
    fi
done

if ! [ -f ~/.ssh/authorized_keys ] ; then
    echo ; echo ; echo
    echo "SSH key fingerprint:"
    ssh-keygen -E "md5" -l -f /etc/ssh/ssh_host_rsa_key.pub | cut -d' ' -f2 | sed 's/MD5://' | sixword -H
    echo ; echo ; echo

    echo "Please run \`yoyo spinup $suggested_ip $USER\` on the credentialer machine..."
    echo "(Waiting for you to run that command...)"
    echo
    wait_for_file ~/.ssh/authorized_keys

    run sudo mkdir -vp ~root/.ssh
    run sudo cp -v ~/.ssh/authorized_keys ~root/.ssh/

    trap - EXIT
    echo "Yoyo is now set up and running!"
fi

wait_for_file /etc/stripe/yoyo/rerun_puppet

. ~/.profile
until stripe-marionette ; do
    if [ $? = 2 ] ; then
        echo "stripe-marionette finished - yay!"
        break
    fi
    read -p "stripe-marionette exited with an error. Hit RET to retry: "
done

echo "All done! Thanks for your patience!"
