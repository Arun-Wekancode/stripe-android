#!/bin/bash
set -eu
set -o pipefail

run() {
    echo >&2 "+ $*"
    "$@"
}

wait_for_file() {
    echo "- Waiting for $1..."
    while ! [ -f "$1" ] ; do
        sleep 1
    done
}

default_password_set() {
    default_password='falafels'
    sudo -k
    if dscl . -passwd /Users/$USER "$default_password" "$default_password" >/dev/null 2>/dev/null ; then
        return 0
    else
        return 1
    fi
}

run_background_jobs() {
    trap 'kill $sudo_pid $caffeinate_pid' EXIT
    while echo "$user_password" | sudo -v -S -p '' ; do
        sleep 60
    done &
    local sudo_pid=$!
    caffeinate -ids &
    local caffeinate_pid=$!
}

generate_input_plist() {
    local user_password="$1"
    cat <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>Password</key>
<string>$user_password</string>
</dict>
</plist>
EOF
}

# Set at imaging time, must be reset before we actually get anywhere
# that places certs on this machine:
default_password='falafels'

# we shouldn't be root when running this
if [ "$(id -u)" -eq 0 ]; then
    echo "error: this script should not be run as root"
    exit 1
fi

user_password="$default_password"
if ! default_password_set ; then
    read -p "Enter sudo password for $USER: " -s user_password
    echo "$user_password" | sudo -k -v -S -p ''
    run_background_jobs
else
    echo "$user_password" | sudo -v -S -p ''
fi

# install software updates (specifically so we get OS X 10.9.2+), but
# only once:
if ! sudo softwareupdate --schedule | grep '^Automatic check is off'; then
    run sudo softwareupdate --install --all
    run sudo softwareupdate --schedule on
fi

# turn on filevault if it's not on
if ! run fdesetup isactive; then
    echo "Full disk encryption is not active. Enabling (this will reboot)..."
    generate_input_plist "$user_password" | run sudo fdesetup enable -user $USER -authrestart -inputplist
fi

trap 'echo ERROR' EXIT

# Reset any default passwords from imaging:
if default_password_set ; then
    echo "Default password detected, we must reset it now!"
    read -p "Enter new password for $USER: " -s user_password
    dscl . -passwd /Users/$USER "$default_password" "$user_password"
    sudo -k
    echo "$user_password" | sudo -v -S -p ''
    run_background_jobs
fi

# enable SSH
run sudo systemsetup -setremotelogin on

# SSH key doesn't exist until we hit the SSH server for the first time
echo hello | run nc -z localhost 22

if ! which sixword >/dev/null; then
    run sudo gem install sixword
fi

suggested_ip=''
echo "Potential IP addresses:"
for i in $(seq 0 "$(ipconfig ifcount)"); do
    if="en$i"
    ip="$(ipconfig getifaddr "$if" || true)"
    if ! [ -z "$ip" ] ; then
        echo "$if: $ip"
        if [ -z "$suggested_ip" ] ; then
            suggested_ip="$ip"
        else
            suggested_ip="{IP}"
        fi
    fi
done

if ! [ -f ~/.ssh/authorized_keys ] ; then
    echo ; echo ; echo
    echo "SSH key fingerprint:"
    ssh-keygen -lf /etc/ssh_host_rsa_key.pub | cut -d' ' -f2 | sixword -H
    echo ; echo ; echo

    echo "Please run \`yoyo spinup $suggested_ip $USER\` on the credentialer machine..."
    echo "(Waiting for you to run that command...)"
    echo
    wait_for_file ~/.ssh/authorized_keys

    run sudo mkdir -vp ~root/.ssh
    run sudo cp -v ~/.ssh/authorized_keys ~root/.ssh/

    trap - EXIT
    echo "Yoyo is now set up and running!"
fi

wait_for_file /etc/stripe/yoyo/rerun_puppet

. ~/.profile
until stripe-marionette ; do
    if [ $? = 2 ] ; then
        echo "stripe-marionette finished - yay!"
        break
    fi
    read -p "stripe-marionette exited with an error. Hit RET to retry: "
done

echo "All done! Thanks for your patience!"
