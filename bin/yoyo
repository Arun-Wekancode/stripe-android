#!/usr/bin/env ruby

require_relative '../lib/yoyo'
require 'chalk-cli'

class Spinup < Chalk::CLI::Command
  NECESSARY_GROUPS=%w{stripe}

  def invoke
    if arguments.length != 3
      usage
      return false
    end
    command_name, ip_address, username = arguments
    groups = NECESSARY_GROUPS + options[:groups].split(/,\s*/)

    args = {
      :no_certs => options[:no_certs],
      :groups => groups,
      :gpg_key => options[:gpg_key],
      :stripe_user => options[:stripe_user],
      :machine_nubmer => options[:machine],
    }

    mgr = Yoyo::Manager.new(ip_address, username, args)
    mgr.deploy_authorized_keys! unless mgr.keys_deployed?
    mgr.spin_up!
    mgr.disable_ssh!
  end

  App = Chalk::CLI::App.new('Usage: #{$0} spinup [OPTIONS] IP USERNAME')
  App.options do |opts|
    opts.opt :no_certs, "Skip the certificate-generation step (for spinning up contractor machines)",
             :default => false
    opts.opt :groups, "Add the user to these permission groups in puppet (separated by commas)",
             :type => :string, :default => nil
    opts.opt :gpg_key, "Assume this GPG fingerprint is the existing key",
             :type => :string, :default => nil
    opts.opt :stripe_user, 'Stripe username, if different from local username',
             :type => :string, :default => nil
    opts.opt :machine, 'Stripe machine number (this goes on "st-userNN")',
             :type => :integer, :default => nil
  end
  App.action(self)
end

class Cleanup < Chalk::CLI::Command
  def invoke
    command_name, ip_address, username = arguments
    mgr = Yoyo::Manager.new(ip_address, username)
    mgr.disable_ssh!
  end

  App = Chalk::CLI::App.new('Usage: #{$0} cleanup IP USERNAME')
  App.action(self)
end

class Decredential < Chalk::CLI::Command
  def invoke
    command_name, username = arguments
    mgr = Yoyo::Manager.new(nil, username)
    mgr.decredential_user!
  end

  App = Chalk::CLI::App.new('Usage: #{$0} decredential USERNAME')
  App.action(self)
end

def usage
  $stderr.puts <<-EOM
usage: #{File.basename($0)} COMMAND [ARGS...]

Commands:

    spinup [options] IP_ADDRESS USERNAME

    cleanup IP_ADDRESS USERNAME

    decredential USERNAME

    EOM
  return 1
end

def parse_args(args)
  case args.first
  when 'spinup'
    Spinup::App.run_if_invoked(__FILE__)
  when 'cleanup'
    Cleanup::App.run_if_invoked(__FILE__)
  when 'decredential'
    Decredential::App.run_if_invoked(__FILE__)
  else
    return usage
  end

  return 0
end

exit(parse_args(ARGV))
